#
# GitHub actions for building the distribution and wheels of the sgp4 package
# linting and testing the source.
#
# Contributed by @mworion
#
# Strategy:
# The action is called with each commit, pull request master (and) release
# branch. If commit is to release branch, the PyPI upload will follow
# successful tests automatically.
#
# Run lint on python source, build step by step the python distro and
# run all package tests for all OS and python versions
#
# If this job succeeds, build step by step all wheels for all OS and python
# versions and run the tests in accelerated mode.
#
# If the first two jobs succeed, upload the distro and wheels to PyPI
#

name: ci

on:
  # The trigger event for running the action is either a push on master or
  # release branch

  push:
    branches:
      - master
      - release
      - ci

  # or a pull request to master branch
  pull_request:
    branches:
      - master

jobs:
  # This action is split into three jobs:
  # - Building the distribution linting and testing without acceleration.
  # - Building the wheels for the distribution and testing with acceleration.
  # - Uploading the artifacts to PyPI package if branch is release.
  # The uploading job needs all tests to be finished without error.

  build_test_dist:
    # Build the distribution in a matrix. Jobs are done in parallel.
    # The formal distro which is uploaded to PyPI will be built on
    # ubuntu-latest for python 3.13.
    # As in dist build no compilation takes place, we run all tests
    # in not accelerated mode.

    runs-on: ${{ matrix.os }}
    name: Build dist ${{ matrix.python-version }} on ${{ matrix.os }}
    strategy:
      max-parallel: 24
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Setup_Python_${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # The build test needs numpy and pyflakes. Adding twine enables for
      # testing and checking the metadata.

      - name: install dependencies
        run: pip install numpy pyflakes setuptools twine

      - name: build distro
        run: python setup.py sdist

      - name: check metadata
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        run: twine check dist/*

      - name: upload distro
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
        uses: actions/upload-artifact@v4
        with:
          name: artifact-dist-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*.tar.gz

      - name: rename file
        run: mv dist/sgp4*.* dist/sgp4.tar.gz

      - name: install distro for testing
        run: |
          pip install dist/sgp4.tar.gz
          python -c "from sgp4.api import accelerated; print(accelerated)"

      - name: run tests
        run: python -m sgp4.tests

  build_test_wheels:
    # Building wheels for different OS, python and platform versions. This is
    # done with the help of 'cibuildwheel' package.
    # Reference: https://cibuildwheel.readthedocs.io
    # OS: Windows (10, 11), Linux (x86 and ARM), macOS13 (x64) and macOS14 (M1)
    # Python wheels for versions 3.7 - 3.13
    # Tests run in accelerated mode and python 3.13 only.

    runs-on: ${{ matrix.os }}
    name: Build wheels on ${{ matrix.os }}
    needs: [build_test_dist]

    strategy:
      max-parallel: 5
      matrix:
        os: [windows-latest, ubuntu-latest, ubuntu-24.04-arm,  macos-13, macos-14]

    steps:
      - uses: actions/checkout@v4
      - name: Build wheels python 3.7 - 3.12
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_BUILD: "cp37-* cp38-* cp39-* cp310-* cp311-* cp312-*"
          CIBW_BUILD_VERBOSITY: 0
          CIBW_SKIP: '*-musllinux_*'

      - name: Build wheels python 3.13
        uses: pypa/cibuildwheel@v2.23.2
        env:
          CIBW_BUILD: "cp313-*"
          CIBW_BUILD_VERBOSITY: 0
          CIBW_SKIP: '*-musllinux_*'
          CIBW_TEST_REQUIRES: numpy==2.2.3
          CIBW_TEST_COMMAND: python -m sgp4.tests
      
      - name: upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: artifact-wheelhouse-${{ matrix.os }}
          path: wheelhouse

  upload_to_pypi:
    # Finally, we collect all out data from the artifacts and put them back to
    # dist directory for an upload. The final step waits for the other jobs to
    # be finished and starts only if the trigger event of the action was a push
    # on release branch

    runs-on: [ubuntu-latest]
    needs: [build_test_dist, build_test_wheels]

    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/release'

    steps:
    - uses: actions/setup-python@v5

    - uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: artifact-*
        merge-multiple: true

    # For the activation of the PyPI index, please add a secret token from
    # PyPI to the GitHub repo, give it a name and replace in the password
    # reference the <pypi_password> with the name of the secret's name you have
    # chosen for the PyPI token.

    - name: upload_to_pypi
      uses: pypa/gh-action-pypi-publish@v1.8.10
      with:
        user: __token__
        password: ${{ secrets.pypi_password }}
        skip_existing: true
